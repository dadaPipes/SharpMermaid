{
  "docs/features/project-diagram/logical-project-diagram.html": {
    "href": "docs/features/project-diagram/logical-project-diagram.html",
    "title": "Logical Project Diagram | SharpMermaid",
    "summary": "Logical Project Diagram Description As a developer, I want to generate a package-style diagram that groups projects by their folder structure, So that I can understand how the solution is logically organized and interconnected. Rules bin and obj must not appear in the generated diagram. Only .csproj files are included in the diagram The diagram must include a node for each project in the solution. Each project may include one or multiple dependencies. The diagram may represent dependencies between projects in the solution. Each project node may include a clickable url Nodes may support tooltips. Nodes may support click actions. Nodes must be grouped visually according to their folder structure. Grouping boxes must be based on the folder names containing the projects. The diagram must not include bin, obj, or non-project folders. Scenarios Generate Diagram With Projects in Root Folder Given all projects are in the solution root folder, When the diagram is generated, Then the diagram should: Include a node for each project. Show all project nodes in a single group (the root). Include no nested folder boxes. Generate Diagram Representing Logical Structure Given the solution folder contains multiple projects with dependencies When the diagram is generated Then the diagram should: Include nodes representing projects. Represent the logical hierarchy of projects and folders. Include arrows representing dependencies between projects."
  },
  "docs/features/project-diagram/physical-project -diagram.html": {
    "href": "docs/features/project-diagram/physical-project -diagram.html",
    "title": "Physical Project Diagram | SharpMermaid",
    "summary": "Physical Project Diagram Description As a developer, I want to generate a diagram that accurately reflects the physical arrangement of projects and files on disk, So that I can analyze the hierarchy and structure of the solution. Rules bin and obj must not appear in the generated diagram. Only .csproj files are included in the diagram The diagram must include a node for each project in the solution. Each project may include one or multiple dependencies. The diagram may represent dependencies between projects in the solution. Each project node may include a clickable url Nodes may support tooltips. Nodes may support click actions. Scenarios Generate Diagram With No Projects Given the solution folder does not contain any projects, When the diagram is generated, Then the diagram should: Not include any nodes or arrows. Generate Diagram With Multiple Projects and Zero Project Dependencies Given the solution folder contains multiple projects with dependencies, When the diagram is generated, Then the diagram should: Include nodes representing projects. Represent the physical hierarchy of files on disk. Not include any arrows representing dependencies between projects. Generate Diagram With Multiple Projects and Project Dependencies Given the solution folder contains multiple projects with dependencies, When the diagram is generated, Then the diagram should: Include nodes representing projects. Represent the physical hierarchy of files on disk. Include arrows representing dependencies between projects. Generate Diagram With 1 Project and A Clickable URL Given the solution folder contains a single project And the project include .cs files. When the diagram is generated, Then the diagram should: Include a node representing the project. Include a clickable URL for the project node, leading to its details. Generate Diagram With Multiple Projects and Clickable URLs Given the solution folder contains multiple projects, each with one or more classes, When the diagram is generated, Then the diagram should: Include a node representing each project. Include a clickable URL for each project node, leading to its details. Generate Diagram With Multiple Projects and Clickable URLs and Project Dependencies Given the solution folder contains multiple projects, each with one or more classes, And the projects have dependencies, When the diagram is generated, Then the diagram should: Include a node representing each project. Include a clickable URL for each project node, leading to its details. Include arrows representing dependencies between projects. Generate Diagram With Multiple Projects and Clickable URLs and Tooltips Tooltips does not even work in the Mermaid Live Editor, so this one is for another time. https://github.com/mermaid-js/mermaid/issues/3111 https://github.com/squidfunk/mkdocs-material/issues/4686 Generate Diagram With Multiple Projects and Project Dependencies and Clickable URLs and Tooltips Tooltips does not even work in the Mermaid Live Editor, so this one is for another time https://github.com/mermaid-js/mermaid/issues/3111 https://github.com/squidfunk/mkdocs-material/issues/4686"
  },
  "docs/features/project-diagram/shared-rules.html": {
    "href": "docs/features/project-diagram/shared-rules.html",
    "title": "| SharpMermaid",
    "summary": "bin and obj must not appear in the generated diagram. Only .csproj files are included in the diagram The diagram must include a node for each project in the solution. Each project may include one or multiple dependencies. The diagram may represent dependencies between projects in the solution. Each project node may include a clickable url Nodes may support tooltips. Nodes may support click actions."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | SharpMermaid",
    "summary": "Getting Started Bacon ipsum dolor amet bacon hamburger doner beef tail, boudin ribeye biltong. Pastrami meatball ball tip bacon pig turkey. Meatball short loin pig turkey shoulder pork belly. T-bone drumstick pastrami cupim shoulder ribeye sausage, strip steak turducken shankle jowl kevin beef ribs bacon short loin. Sirloin pig shank tri-tip t-bone jerky bacon tail, hamburger landjaeger swine. Hamburger pancetta chislic fatback, tongue tri-tip bacon capicola pastrami ground round beef ribs venison."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SharpMermaid | SharpMermaid",
    "summary": "Welcome to SharpMermaid Important Under construction Document C# code in Markdown using Mermaid diagrams. This project is a C# library that generates Markdown documentation from C# code, with support for Mermaid diagrams. It is designed to be easy to use and integrate into your existing documentation workflow."
  }
}