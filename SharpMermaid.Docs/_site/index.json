{
  "docs/cross-features.html": {
    "href": "docs/cross-features.html",
    "title": "Cross Features | SharpMermaid",
    "summary": "Cross Features Rules Config File Missing mermaidconfig.json file: If mermaidconfig.json is not found in the current working directory, the console must display: \"Error: Configuration file 'mermaidconfig.json' not found in the current directory\" see: scenario: Missing SolutionPath: If SolutionPath is not provided, the system must stop execution and the console must display: \"Error: 'SolutionPath' is missing in 'mermaidconfig.json'. Please specify a valid solution path.\" see: scenario Invalid SolutionPath: If a .sln file does not exist at SolutionPath, the system must stop execution and the console must display: \"Error: .sln file not found at '{path}'. Please provide a valid 'SolutionPath' in 'mermaidconfig.json'\" see: scenario Project Files No .csproj Files Found: If no .csproj files are found in the solution, the console must display: Warning: No .csproj files found at '{SolutionPath}'\" see: scenario: No .cs Files Found: If no .cs files are found in a project, the console must display: \"{solution path}: Warning: No .cs files found in '{project name}' at '{SolutionPath}'\" see: scenario: Bi-directional references: If a bi-directional reference is detected between .csproj files, the console must display the following message: Bi-directional reference detected between: {project name} at '{SolutionPath}' and {project name} at '{SolutionPath}' see: scenario Diagram Conflicts If multiple diagrams have the same FileName and OutputDirectory, execution must stop and the console must display: \"Error: Multiple diagrams cannot have the same FileName '{FileName}' and OutputDirectory '{OutputDirectory}'. Please resolve the conflict.\" see: scenario: Scenarios Warn when solution contains no projects Given a solution EmptySolution And the solution contains no .csproj files When I run the command: sharpmermaid generate-diagram --solution ./EmptySolution.sln from the solution directory Then the console output includes the warning: \"No projects found in the solution EmptySolution\" Create File A1 Warn on bi-directional project references Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj ProjectB at ProjectB/ProjectB.csproj And ProjectA references ProjectB And ProjectB references ProjectA When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln from the solution directory Then the console output includes the warning: \"Bi-directional dependency detected between ProjectA and ProjectB\" Warn when project contains no .cs files Given a solution NoCsFilesSolution containing: EmptyProject at EmptyProject/EmptyProject.csproj And EmptyProject contains no .cs files When I run the command: sharpmermaid generate-diagram --solution ./NoCsFilesSolution.sln` from the solution directory Then the console output includes the warning: \"No .cs files found in EmptyProject\" Warn when a single file contains multiple public types Given a solution MultiTypeSolution containing: MultiTypeProject at MultiTypeProject/MultiTypeProject.csproj And MultiTypeProject has a file Types.cs containing: public class A {} public class B {} When I run the command: sharpmermaid generate-diagram --solution ./MultiTypeSolution.sln from the solution directory Then the console output includes the warning: \"Multiple public types found in {FullPath}/MultiTypeProject/Types.cs: A, B\""
  },
  "docs/cross-features/create-file.html": {
    "href": "docs/cross-features/create-file.html",
    "title": "scenario | SharpMermaid",
    "summary": "Create File Description As a developer, I want the system to create a new file when needed and overwrite existing files when specified, So that I can ensure file operations are handled efficiently without unintended conflicts. Dependencies process exit Rules Create new file If no file, with a specified FileName and FileType exists at OutputDirectory, the system must create a new file with the specified FileName and FileType at OutputDirectory see: scenario and the system must display: \"Created new file '{fileName}.{FileType}' at '{OutputDirectory}'\" and the process must exit with code 0 see: process exit rule Override existing file If a file with the same FileName and FileType already exists at OutputDirectory, the system must overwrite it see: scenario and the system must display: \"Overwriting existing file at '{OutputDirectory}/{FileName}{FileType}\" and the process must exit with code 0 see: process exit rule Scenarios Create new file (System Test) Override file (System Test)"
  },
  "docs/cross-features/process-exit.html": {
    "href": "docs/cross-features/process-exit.html",
    "title": "process exit | SharpMermaid",
    "summary": "Process Exit Description As a developer I want the process to terminate with standardized exit codes and messages So that I can handle success and failure conditions consistently Rules 0 - Success When a command completes successfully: May display a message indicating the operation succeeded: \"{sucessMessage}\" The system must exit with code 0 see: scenario 1 - General Error (Catchall) If an unexpected error occurs that does not match a specific exit code: The system must display: \"Error: An unexpected failure occurred - {errorMessage}\" The system must exit with code 1 see: scenario 73 - File Already Exists When a file already exists at the target path and should not be overwritten: The system must display: \"Error: A '{fileName}' file already exists at '{path}/{fileName}'\" The system must exit with code 73 see: scenario 74 - General I/O Error If a general I/O error occurs (disk full, file locked, etc ..): The system must display: \"Error: Failed to write file at '{path}/{file}': {errorMessage}\" The system must exit with code 74 see: scenario 75 - Configuration Missing If the application expects a configuration file but it does not exist: The system must display: \"Error: Required configuration file '{fileName}' is missing\" The system must exit with code 75 see: scenario 76 - Configuration Error If a configuration file exists but is invalid: The system must display: \"Error: Invalid configuration in '{path}/{file}' - {validationMessage}\" The system must exit with code 76 see: scenario 77 - Permission Denied If the system does not have permission to write to the target path: The system must display: \"Error: Cannot write to '{path}/{file}' - No write permission\" The system must exit with code 77 see: scenario Scenarios Scenario: Successful Execution Given the application executes a command successfully And no errors occur during the operation When the process completes Then the system may display: \"{successMessage}\" And the system must exit with code 0 Scenario: General Error (Catchall) Given an unknown failure occurs during execution And the error does not match any specific exit code condition When the application fails unexpectedly Then the system must display: \"Error: An unexpected failure occurred - {errorMessage}\" And the system must exit with code 1 Scenario: File Already Exists Given a file named {fileName} already exists at {path} And the operation must not overwrite existing files When the application attempts to write to {path}/{fileName} Then the system must display: \"Error: A '{fileName}' file already exists at '{path}/{fileName}'\" And the system must exit with code 73 Scenario: General I/O Error Given an I/O issue occurs while trying to write to {path}/{file} And possible reasons include disk space exhaustion or file locks When the application attempts to write data Then the system must display: \"Error: Failed to write file at '{path}/{file}': {errorMessage}\" And the system must exit with code 74 Scenario: Configuration Missing Given the system requires a configuration file named {fileName} And the file does not exist When the application starts and tries to load the configuration Then the system must display: \"Error: Required configuration file '{fileName}' is missing\" And the system must exit with code 75 Scenario: Configuration Error (Malformed or Invalid File) Given the system loads the configuration from {path}/{file} And the configuration file is present but invalid or improperly formatted When the application attempts to parse the configuration file Then the system must display: \"Error: Invalid configuration in '{path}/{file}' - {validationMessage}\" And the system must exit with code 76 Scenario: Permission Denied Given the system needs to write to {path}/{file} And the application does not have the required permissions When the application attempts to write to the file Then the system must display: \"Error: Cannot write to '{path}/{file}' - No write permission\" And the system must exit with code 77"
  },
  "docs/features/GenerateClassDiagrams/Main.html": {
    "href": "docs/features/GenerateClassDiagrams/Main.html",
    "title": "Generate Class Diagrams | SharpMermaid",
    "summary": "Generate Class Diagrams Description As a developer, I want to generate a class diagram for each .csproj in my solution, So that I can visualize the structure, responsibilities, and relationships of types in the project. Rules General Structure [!include[Shared Diagram Rules](../Shared/DiagramRules.md)] Each diagram must start with a classDiagram declaration Each generated diagram must have a title matching the project name Each class must be represented with the .cs file name as the node name Class nodes must display the type name and its kind: Supported kinds: class (including regular, abstract, sealed, generic, partial) interface (including generic and partial) struct (including readonly, partial, and generic) enum record (including record class, record struct, readonly record struct, generic, and partial) Only types from .cs files within the target .csproj must be included File Organization and Grouping Namespaces must be used for grouping when applicable Class nodes must be grouped based on their nested folder structure Partial types must be grouped according to their file path structure within the .csproj Dependencies to partial classes must link to each individual partial class, rather than a merged representation Relationships Relationships must be indicated with usage arrows when dependencies exist between classes - Supported relationship types include: - Inheritance (<|--) � Extends a class (parent-child relationship) - Composition (*--) � Has-a relationship (strong ownership; part-whole) - Aggregation (o--) � Has-a relationship (weaker ownership; shared instance) - Association (-->) � References or links to another class - Dependency (..>) � Uses another class but does not own it (loose coupling) - Realization (..|>) � Implements an interface (contract fulfillment) Clickable Links Each class node must include a clickable link to its corresponding source file, formatted as [BaseUrl] / [Relative Path to Project] / [Source File Name] Styling Types with public access modifiers must have a green edge for clear visibility, formatted as: style [TypeName] stroke:green,stroke-width:4px Supported types include: class, interface, enum, struct, record. TODO: How to visualize multiple implemented interfaces? Should inheritance chains show only direct parent-child links, or full ancestry? How to differentiate between inherited members and explicitly declared members? constructors, methods, and properties May ( configurables ) Scenarios Generating Diagrams for Multiple Projects Given a solution containing multiple projects And each project contains multiple .cs files, including files within nested directories When I generate the diagrams Then a separate class diagram should be created for each project And each diagram should have a title matching the project name And each class node should be named after its .cs file And each class node should have a clickable URL reflecting its full directory structure, including nested folders"
  },
  "docs/features/GenerateLogicalProjectDiagram/Main.html": {
    "href": "docs/features/GenerateLogicalProjectDiagram/Main.html",
    "title": "Logical Project Diagram | SharpMermaid",
    "summary": "Logical Project Diagram Description As a developer, I want to generate a package-style diagram that groups projects by their folder structure, So that I can understand how the solution is logically organized and interconnected. Rules [!include[Shared Diagram Rules](../Shared/DiagramRules.md)] Diagram must start with a graph Declaration The console must display a warning message \"No projects found in the solution\", when the solution contains no .csproj files Diagram must have a title same as the solution name The diagram may include a node for each project in the solution, with the same name as the project Relationships must be indicated with usage arrows when dependencies exist between projects, including bi-directional dependencies A warning must be issued in the console when a bi-directional dependency is detected Project nodes must be grouped into subgraphs based on their folder structure when multiple projects exist inside grouping folders Configuration Project nodes that has source files, may include a url to the projects class diagram Each project node in the diagram may display all public types defined within the project, including: classes interfaces structs enums records Scenarios Solution With Without Projects Given the solution contains no projects When the diagram is generated Then the title should be the solution name And the diagram should have no nodes or dependencies Solution With Root Projects Only Given all projects are in the solution root folder When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project Solution With Root Projects Only With Dependencies Given all projects are in the solution root folder And some projects depend on each other When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And arrows should represent the dependencies between projects Mixed Folder Structure With 1 Root Project Given one project is in the root folder And the other projects are in a subfolder And the root project has dependencies to the other projects When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And nodes should be grouped into subgraphs based on their folder structure And And arrows should represent project dependencies Mixed Folder Structure With Multiple Root Projects Given multiple projects are in the root folder And other projects are in subfolders And some projects depend on each other When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And nodes should be grouped into subgraphs based on their folder structure And And arrows should represent project dependencies"
  },
  "docs/features/generate-physical-project-diagram.html": {
    "href": "docs/features/generate-physical-project-diagram.html",
    "title": "Generate Physical Project Diagram | SharpMermaid",
    "summary": "Generate Physical Project Diagram Description As a developer, I want to generate a Physical Project diagram from the Diagrams collection in mermaidconfig.json So that I get a visual representation of my project structure on disk. Dependencies process exit mermaidconfig root mermaidconfig PhysicalProjectDiagram Preconditions The file system is available with write access to OutputDirectory A valid mermaidconfig.json exists in the current working directory CLI Usage dotnet sharpmermaid generate Rules The created .mmd file Must start with a title that matches the solution name Must include a graph declaration Must include project nodes matching the project names May include clickable URLs to class diagrams May include top-level public types May include project references between projects see: scenario The created .md file Must start with mermaid code block fence Must end with code block fence footer Must have its first non-fence line start with graph Must include a title that matches the solution name Must include project nodes matching the project names May include clickable URLs to class diagrams May include top-level public types May include project references between projects see: scenario Scenarios Valid .mmd file Given the developer’s current working directory is {cwd} And a solution file TestSolution.sln exists at {cwd}/TestSolution.sln And ./TestSolution contains: ProjectA at ./ProjectA/ProjectA.csproj A file ExampleA.cs in ProjectA with public class ExampleA {} A file IExampleA.cs in ProjectA with public interface IExampleA {} ProjectB at ./Folder1/ProjectB/ProjectB.csproj A file ExamplePrivate.cs in ProjectB with private class ExampleDefaultInternal {} A file ExampleDefaultInternal.cs in ProjectB with class ExampleDefaultInternal {} A file ExampleInternal.cs in ProjectB with class ExampleInternal {} And ProjectA has a reference to ProjectB And a sharpmermaidconfig.json file exist in the solution with: { \"SolutionPath\": \"./TestSolution.sln\", \"OutputDirectory\": \"./Diagrams\", \"Diagrams\": [ { \"DiagramType\": \"PhysicalProject\", \"FileName\": \"PhysicalDiagram\", \"FileType\": \".mmd\", \"TopLevelPublicTypes\": true, \"ClassDiagramLinks\": true, \"BaseUrl\": \"https://example.com/\" } ] } When the developer runs: dotnet sharpmermaid generate Then the generated file must be created at {cwd}/Diagrams/PhysicalDiagram.mmd And the console must display: Created new file 'mermaid.md' at '{cwd}/Diagrams/PhysicalDiagram.mmd' And the file must imclude: A title: TestSolution A graph declaration Project nodes: ProjectA and ProjectB Clickable URLs: https://example.com/ProjectA/ProjectA.csproj https://example.com/Folder1/ProjectB/ProjectB.csproj Top-level public type in ProjectA: public class ExampleA public interface IExampleA An arrow from ProjectA to ProjectB --- title: TestSolution --- graph ProjectA[\"**ProjectA** Example\" IExample] ProjectB ProjectA --> ProjectB click ProjectA \"https://example.com/ProjectA/ProjectA.csproj\" click ProjectB \"https://example.com/Folder1/ProjectB/ProjectB.csproj\" --- title: TestSolution --- graph ProjectA[\"**ProjectA** Example\" IExample] ProjectB ProjectA --> ProjectB click ProjectA \"https://example.com/ProjectA/ProjectA.csproj\" click ProjectB \"https://example.com/Folder1/ProjectB/ProjectB.csproj\" Valid .md file Given"
  },
  "docs/features/init.html": {
    "href": "docs/features/init.html",
    "title": "Init | SharpMermaid",
    "summary": "Init Description As a developer, I want to Create a default mermaidconfig.json in the current directory So that I have a ready-to-edit configuration file for diagram generation Dependencies process exit default mermaidconfig.json CLI Usage dotnet sharpmermaid init Rules mermaidconfig.json does not exist If mermaidconfig.json does not exist in {cwd}, the system must create a default mermaidconfig.json in {cwd} see: scenario and the system must display: Created new file 'mermaidconfig.json' at '{cwd}' and the process must exit with code 0 see: process exit rule mermaidconfig.json exists If mermaidconfig.json exists in {cwd}, the system must exit with code 73 see: process exit rule Scenarios mermaidconfig.json does not exist (System Test) Given the working directory is {cwd} And no mermaidconfig.json exists in {cwd} When the system attempts to create a default configuration Then a file named mermaidconfig.json exist in {cwd} And its content must match the following default configuration: { \"SolutionPath\": \"./TestSolution.sln\", \"OutputDirectory\": \"./Diagrams\", \"FileType\": \".mmd\", \"Diagrams\": [ { \"PhysicalProject\": { \"OutputDirectory\": \"./Override/Diagrams\", \"FileName\": \"PhysicalDiagram\", \"FileType\": \".mmd\", \"TopLevelPublicTypes\": true, \"ClassDiagramLinks\": true, \"BaseUrl\": \"https://example.com/\" } } ] } mermaidconfig.json exist (System Test) Given the working directory is {cwd} And a mermaidconfig.json exists in {cwd} When the system attempts to create a default configuration Then the execution stop"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | SharpMermaid",
    "summary": "Getting Started Bacon ipsum dolor amet bacon hamburger doner beef tail, boudin ribeye biltong. Pastrami meatball ball tip bacon pig turkey. Meatball short loin pig turkey shoulder pork belly. T-bone drumstick pastrami cupim shoulder ribeye sausage, strip steak turducken shankle jowl kevin beef ribs bacon short loin. Sirloin pig shank tri-tip t-bone jerky bacon tail, hamburger landjaeger swine. Hamburger pancetta chislic fatback, tongue tri-tip bacon capicola pastrami ground round beef ribs venison. OBS: “Cross-feature concepts shouldn’t live inside other features.” A CLI tool that generates Mermaid diagrams from a .NET soslution or project, supporting different diagram types (physical, logical, API, microservice, etc.) and output formats (Markdown, HTML, standalone SVG/PNG). Command-Line [!include[Generate Physical Project CLI Arguments](./features/GeneratePhysicalProjectDiagram/CommandLineArguments.md)]"
  },
  "docs/mermaidconfig/default.html": {
    "href": "docs/mermaidconfig/default.html",
    "title": "default mermaidconfig.json | SharpMermaid",
    "summary": "{ \"SolutionPath\": \"./TestSolution.sln\", \"OutputDirectory\": \"./Diagrams\", \"FileType\": \".mmd\", \"Diagrams\": [ { \"PhysicalProject\": { \"OutputDirectory\": \"./Override/Diagrams\", \"FileName\": \"PhysicalDiagram\", \"FileType\": \".mmd\", \"TopLevelPublicTypes\": true, \"ClassDiagramLinks\": true, \"BaseUrl\": \"https://example.com/\" } } ] }"
  },
  "docs/mermaidconfig/physical-project.html": {
    "href": "docs/mermaidconfig/physical-project.html",
    "title": "mermaidconfig PhysicalProjectDiagram | SharpMermaid",
    "summary": "PhysicalProjectDiagram Description Generates a physical project layout diagram. Example { \"Diagrams\": [ { \"PhysicalProjectDiagram\": { \"OutputDirectory\": \"./Override/Diagrams\", \"FileName\": \"PhysicalDiagram\", \"FileType\": \".mmd\", \"TopLevelPublicTypes\": true, \"ClassDiagramLinks\": true, \"BaseUrl\": \"https://example.com/\" } } ] } Properties OutputDirectory Overrides root output path for this diagram. Type: string Required: no Default: Inherits from root OutputDirectory Validation: If provided, must be a valid directory path FileName File name for the generated diagram Type: string Required: yes Default: - Validation: Must not be empty Cannot contain invalid filename characters Must not use file extension TopLevelPublicTypes Include top-level public types in each project. Type: boolean Required: no Default: false Validation: Must be true or false (JSON boolean) ClassDiagramLinks Turn each project node in to a clickable link, that navigates to its class diagram. Type: boolean Required: no Default: false Validation: Must be true or false (JSON boolean) BaseUrl Base URL used to build class diagram links. Type: string Required: if ClassDiagramLinks is true Default: - Validation Required if Root/ClassDiagramLinks is true Must be a valid absolute URL (starts with http:// or https://) Scenarios OutputDirectory is not a valid path Given the user provides an invalid OutputDirectory (e.g., contains illegal characters) When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': OutputDirectory is not a valid directory path\" And the process must exit with code 4 FileName is empty Given the user provides an empty FileName When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': FileName is required\" And the process must exit with code 4 FileName contains invalid characters Given the user provides FileName \"my?file\" When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': FileName contains invalid characters\" And the process must exit with code 4 FileName has a file extension Given the user provides FileName \"diagram.mmd\" When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': FileName must not have a file extension\" And the process must exit with code 4 TopLevelPublicTypes is not a boolean Given the user provides a non-boolean value for TopLevelPublicTypes When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': TopLevelPublicTypes must be a boolean\" And the process must exit with code 4 ClassDiagramLinks is not a boolean Given the user provides a non-boolean value for ClassDiagramLinks When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': ClassDiagramLinks must be a boolean\" And the process must exit with code 4 BaseUrl is required when ClassDiagramLinks is enabled Given the user enables ClassDiagramLinks but omits BaseUrl When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': BaseUrl is required when ClassDiagramLinks is enabled\" And the process must exit with code 4 BaseUrl is not a valid URL Given the user provides an invalid URL for BaseUrl When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': BaseUrl must be a valid absolute URL\" And the process must exit with code 4"
  },
  "docs/mermaidconfig/root.html": {
    "href": "docs/mermaidconfig/root.html",
    "title": "mermaidconfig root | SharpMermaid",
    "summary": "Root Description Root layout diagram. Example { \"SolutionPath\": \"./TestSolution.sln\", \"OutputDirectory\": \"./Diagrams\", \"FileType\": \".mmd\", \"Diagrams\": [] } Properties SolutionPath Path to the solution file. Type: string Required: yes Default: - Validation: Must not be empty Must end with .sln OutputDirectory Output directory for all generated diagrams (overridable per diagram). Type: string Required: yes Default: - Validation: Must not be empty Must be a valid directory path FileType File type for all generated diagrams. Type: string Required: yes Default: - Supported: .mmd and .md Validation: Must be either .mmd or .md Must start with a dot (.) Diagrams An array of diagram configurations. Each item must contain exactly one property, where the key is the diagram type and the value is its specific configuration. Type: array Required: yes Default: - Supported diagram types: Validation: Must not be empty Each item must contain exactly one property Diagram type must be supported Example: { \"Diagrams\": [ { \"PhysicalProjectDiagram\": {} } ] } Scenarios SolutionPath is empty (Acceptance test) Given the user provides an empty SolutionPath When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': SolutionPath is required\" And the process must exit with code 4 SolutionPath does not end with .sln (Acceptance test) Given the user provides SolutionPath \"project.txt\" When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': SolutionPath must point to a .sln file\" And the process must exit with code 4 OutputDirectory is empty (Acceptance test) Given the user provides an empty OutputDirectory When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': OutputDirectory is required\" And the process must exit with code 4 OutputDirectory is not a valid path (Acceptance test) Given the user provides OutputDirectory with an invalid path (ex: containing illegal characters) When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': OutputDirectory is not a valid directory path\" And the process must exit with code 4 FileType is missing (Acceptance test) Given the user omits the FileType property When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': FileType is required\" And the process must exit with code 4 FileType does not start with a dot (Acceptance test) Given the user provides FileType \"mmd\" When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': FileType must begin with a dot\" And the process must exit with code 4 FileType is not .mmd or .md (Acceptance test) Given the user provides FileType \".pdf\" When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': FileType must be either '.mmd' or '.md'\" And the process must exit with code 4 Diagrams is empty (Acceptance test) Given the user provides an empty array for Diagrams When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': Diagrams must contain at least one item\" And the process must exit with code 4 Diagram entry contains more than one property (Acceptance test) Given a diagram entry in Diagrams contains multiple keys When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': Each diagram entry must define exactly one diagram type\" And the process must exit with code 4 Diagram type is unsupported (Acceptance test) Given the user provides an unsupported diagram type \"LogicalLayerDiagram\" When the system validates the configuration Then the console must display: \"Error: Invalid JSON in file '{path to mermaidConfig.json}': Unsupported diagram type 'LogicalLayerDiagram'\" And the process must exit with code 4"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SharpMermaid | SharpMermaid",
    "summary": "Welcome to SharpMermaid Important Under construction Document C# code in Markdown using Mermaid diagrams. This project is a C# library that generates Markdown documentation from C# code, with support for Mermaid diagrams. It is designed to be easy to use and integrate into your existing documentation workflow."
  }
}