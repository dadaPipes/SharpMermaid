{
  "docs/DomainRules.html": {
    "href": "docs/DomainRules.html",
    "title": "Domain Rules (Cross-Feature) | SharpMermaid",
    "summary": "Domain Rules (Cross-Feature) SlnModel Empty Solution Warning When a solution contains no .csproj files Then the system must display a console warning: No projects found in the solution {SolutionName} CsProjModel Missing .cs Files Warning When a project contains no .cs files Then the system must display a console warning: No .cs files found in {ProjectName} CsModel"
  },
  "docs/features/GenerateClassDiagrams/Main.html": {
    "href": "docs/features/GenerateClassDiagrams/Main.html",
    "title": "Generate Class Diagrams | SharpMermaid",
    "summary": "Generate Class Diagrams Description As a developer, I want to generate a class diagram for each .csproj in my solution, So that I can visualize the structure, responsibilities, and relationships of types in the project. Rules General Structure [!include[Shared Diagram Rules](../Shared/DiagramRules.md)] Each diagram must start with a classDiagram declaration Each generated diagram must have a title matching the project name Each class must be represented with the .cs file name as the node name Class nodes must display the type name and its kind: Supported kinds: class (including regular, abstract, sealed, generic, partial) interface (including generic and partial) struct (including readonly, partial, and generic) enum record (including record class, record struct, readonly record struct, generic, and partial) Only types from .cs files within the target .csproj must be included File Organization and Grouping Namespaces must be used for grouping when applicable Class nodes must be grouped based on their nested folder structure Partial types must be grouped according to their file path structure within the .csproj Dependencies to partial classes must link to each individual partial class, rather than a merged representation Relationships Relationships must be indicated with usage arrows when dependencies exist between classes - Supported relationship types include: - Inheritance (<|--) � Extends a class (parent-child relationship) - Composition (*--) � Has-a relationship (strong ownership; part-whole) - Aggregation (o--) � Has-a relationship (weaker ownership; shared instance) - Association (-->) � References or links to another class - Dependency (..>) � Uses another class but does not own it (loose coupling) - Realization (..|>) � Implements an interface (contract fulfillment) Clickable Links Each class node must include a clickable link to its corresponding source file, formatted as [BaseUrl] / [Relative Path to Project] / [Source File Name] Styling Types with public access modifiers must have a green edge for clear visibility, formatted as: style [TypeName] stroke:green,stroke-width:4px Supported types include: class, interface, enum, struct, record. TODO: How to visualize multiple implemented interfaces? Should inheritance chains show only direct parent-child links, or full ancestry? How to differentiate between inherited members and explicitly declared members? constructors, methods, and properties May ( configurables ) Scenarios Generating Diagrams for Multiple Projects Given a solution containing multiple projects And each project contains multiple .cs files, including files within nested directories When I generate the diagrams Then a separate class diagram should be created for each project And each diagram should have a title matching the project name And each class node should be named after its .cs file And each class node should have a clickable URL reflecting its full directory structure, including nested folders"
  },
  "docs/features/GenerateLogicalProjectDiagram/Main.html": {
    "href": "docs/features/GenerateLogicalProjectDiagram/Main.html",
    "title": "Logical Project Diagram | SharpMermaid",
    "summary": "Logical Project Diagram Description As a developer, I want to generate a package-style diagram that groups projects by their folder structure, So that I can understand how the solution is logically organized and interconnected. Rules [!include[Shared Diagram Rules](../Shared/DiagramRules.md)] Diagram must start with a graph Declaration The console must display a warning message \"No projects found in the solution\", when the solution contains no .csproj files Diagram must have a title same as the solution name The diagram may include a node for each project in the solution, with the same name as the project Relationships must be indicated with usage arrows when dependencies exist between projects, including bi-directional dependencies A warning must be issued in the console when a bi-directional dependency is detected Project nodes must be grouped into subgraphs based on their folder structure when multiple projects exist inside grouping folders Configuration Project nodes that has source files, may include a url to the projects class diagram Each project node in the diagram may display all public types defined within the project, including: classes interfaces structs enums records Scenarios Solution With Without Projects Given the solution contains no projects When the diagram is generated Then the title should be the solution name And the diagram should have no nodes or dependencies Solution With Root Projects Only Given all projects are in the solution root folder When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project Solution With Root Projects Only With Dependencies Given all projects are in the solution root folder And some projects depend on each other When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And arrows should represent the dependencies between projects Mixed Folder Structure With 1 Root Project Given one project is in the root folder And the other projects are in a subfolder And the root project has dependencies to the other projects When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And nodes should be grouped into subgraphs based on their folder structure And And arrows should represent project dependencies Mixed Folder Structure With Multiple Root Projects Given multiple projects are in the root folder And other projects are in subfolders And some projects depend on each other When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And nodes should be grouped into subgraphs based on their folder structure And And arrows should represent project dependencies"
  },
  "docs/features/GeneratePhysicalProjectDiagram/CommandLineArguments.html": {
    "href": "docs/features/GeneratePhysicalProjectDiagram/CommandLineArguments.html",
    "title": "| SharpMermaid",
    "summary": "Physical Project Diagram Argument Description <solution.sln> Specifies the solution file to process. --output <file> Defines the output file for the diagram. --include-urls Adds URLs to class diagrams --include-public-types Displays public top-level types"
  },
  "docs/features/GeneratePhysicalProjectDiagram/Main.html": {
    "href": "docs/features/GeneratePhysicalProjectDiagram/Main.html",
    "title": "Generate Physical Project Diagram | SharpMermaid",
    "summary": "Generate Physical Project Diagram Description As a developer, I want to generate a diagram that reflects the solution structure on disk, and format it as a mermaid code block for use in a .md file, So that I can analyze and visualize project organization and dependencies. Rules Console Warnings Empty Solution Warning When a solution has no projects, Then display console warning: \"No projects found in the solution {SolutionName}\" See: SlnModel -> Empty Solution Warning Missing .cs Files Warning Given a project has no .cs files When the diagram is generated Then a console warning must be displayed: \"No .cs files found in {ProjectName}\" See: CsProjModel -> Missing .cs Files Warning Code Block Formatting Mermaid Fences Given a diagram is generated Then the output must start with ```mermaid And the output must end with ``` Diagram Structure Graph Declaration Given a diagram is generated Then the first non-fence line must begin with graph Diagram Title Given a diagram is generated for solution FooApp Then the diagram must include a title FooApp Project Nodes Given N projects are selected When the diagram is generated Then it must include exactly N nodes, each named after its project Dependency Arrows One-way Dependency Given a one-way dependency exists between Project A and Project B When the diagram is generated Then the diagram must include an arrow: A --> B Bi-directional Dependency Given a bi-directional dependency exists between Project A and Project B When the diagram is generated Then the diagram must include an arrow: A <--> B And a console warning must be displayed: \"Bi-directional dependency detected between A and B\" No Dependencies Given a project has no dependencies When the diagram is generated Then it must not include any arrows for that project Class-Diagram URLs (Optional) JSON Configuration Given no CLI parameter is provided, When the diagram is generated, Then configuration must be read from a diagramconfig.json file if present. CLI Overrides Given CLI parameters are provided, When the diagram is generated, Then CLI parameters must override any values in the JSON file Default Behavior Given neither a JSON file nor CLI parameters are provided, When the diagram is generated, Then no URLs must be included in any node URL Composition Given IncludeUrls is true (via JSON or CLI), When the diagram is generated, Then each node must include a clickable URL, And the URL must be assembled using the UrlPattern by substituting: {SolutionName} {ProjectName} {FilePath} {TypeName} Example URL: https://example.com/docs/{ProjectName}/{FilePath}#{TypeName} No URLs Given IncludeUrls is false (via JSON or CLI), When the diagram is generated, Then no URLs must appear in any node URLs Enabled Given “include URLs” is enabled When the diagram is generated Then each node in the diagram must include a clickable URL to its class diagram URLs Disabled Given “include URLs” is disabled When the diagram is generated Then no URLs must appear in the diagram Public-Type Display (Optional) Public Types Enabled Given “show public types” is enabled When the diagram is generated Then each node must list all public top-level types: classes interfaces structs enums records Public Types Disabled Given “show public types” is disabled When the diagram is generated Then no types must appear in any node Multiple Public Types Warning Given a .cs file defines more than one public top-level type, such as: public class A and public class B or public enum X and public struct Y When the diagram is generated Then a console warning must be displayed in the following format: \"Multiple public types found in {FilePath}: {Type1}, {Type2}, ...\" Where {FilePath} is the full path to the .cs file, and {Type1}, {Type2}, ... are the names of the detected public types Command-Line Physical Project Diagram Argument Description <solution.sln> Specifies the solution file to process. --output <file> Defines the output file for the diagram. --include-urls Adds URLs to class diagrams --include-public-types Displays public top-level types Scenarios Required Argument Solution File Path (.sln) -> The tool needs to know what solution file to analyze. sharpmermaid path/to/solution.sln Optional Arguments To match the rules you�ve set, consider adding these CLI flags: --output -> Define a custom output file for the Mermaid diagram. sharpmermaid path/to/solution.sln --output diagram.md --projects Project1,Project2 -> Specify which projects to include in the diagram. --include-urls -> Enable clickable class diagram URLs in project nodes. --include-public-types -> Show public top-level types in each project node. Automatic Console Warnings If no projects exist -> Show warning: \"No projects found in the solution\" **If a .csproj file has no .cs files -> Show a warning for that project.` Solution With Without Projects Given the solution has no projects When the diagram is generated Then the diagram should have no nodes or dependencies And And the title should be the solution name Solution With Single Project Given the solution has a single project And the project has at least one source file When the diagram is generated Then the diagram should include one node And the diagram should have a title same as the solution name And the diagram should include a node for the project in the solution And the diagram should include a url to the projects class diagram Multiple Projects Without Dependencies Given the solution has multiple projects with no dependencies And each project has at least one source file When the diagram is generated Then the diagram should include one node per project And the diagram should have a title same as the solution name And the diagram should include a url to the projects class diagram Multiple Projects With Dependencies Given the solution has multiple projects with dependencies And each project has at least one source file When the diagram is generated Then the diagram should include one node per project And arrows should represent the dependencies between project nodes And each should include a url to the projects class diagram And the diagram should have a title same as the solution name And the diagram should include a url to the projects class diagram"
  },
  "docs/features/SaveDiagram.md/Main.html": {
    "href": "docs/features/SaveDiagram.md/Main.html",
    "title": "Save Physical Project Diagram | SharpMermaid",
    "summary": "Save Physical Project Diagram Description As a developer, I need to save the diagram I generated, So I can easily reference my project's structure and dependencies later. Saving Rules The diagram must be saved as a .md file containing a Mermaid.js code block. The file must always be overwritten to reflect the latest solution state. The default path must be the directory where the command is executed. 3.a If the developer specifies a custom path in the console, the diagram must be saved accordingly. The default filename must be PhysicalProjectDiagram.md. 4.a If the developer specifies a custom filename in the console, the diagram must be saved accordingly. The console must display a confirmation message showing the saved file location. Edge Case Handling Non-Existent Path -> Display \"Error: The specified path does not exist.\" Invalid Characters in Filename -> Display \"Error: Invalid filename detected.\" Insufficient Write Permissions -> Display \"Error: Unable to save diagram. Check permissions.\""
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | SharpMermaid",
    "summary": "Getting Started Bacon ipsum dolor amet bacon hamburger doner beef tail, boudin ribeye biltong. Pastrami meatball ball tip bacon pig turkey. Meatball short loin pig turkey shoulder pork belly. T-bone drumstick pastrami cupim shoulder ribeye sausage, strip steak turducken shankle jowl kevin beef ribs bacon short loin. Sirloin pig shank tri-tip t-bone jerky bacon tail, hamburger landjaeger swine. Hamburger pancetta chislic fatback, tongue tri-tip bacon capicola pastrami ground round beef ribs venison. Command-Line Physical Project Diagram Argument Description <solution.sln> Specifies the solution file to process. --output <file> Defines the output file for the diagram. --include-urls Adds URLs to class diagrams --include-public-types Displays public top-level types"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SharpMermaid | SharpMermaid",
    "summary": "Welcome to SharpMermaid Important Under construction Document C# code in Markdown using Mermaid diagrams. This project is a C# library that generates Markdown documentation from C# code, with support for Mermaid diagrams. It is designed to be easy to use and integrate into your existing documentation workflow."
  }
}