{
  "docs/ConfigTestCoverageChecklist.html": {
    "href": "docs/ConfigTestCoverageChecklist.html",
    "title": "Config Test Coverage Checklist | SharpMermaid",
    "summary": "Config Test Coverage Checklist CLI parameters provided CLI values set configuration options and override JSON and defaults If required CLI parameters are missing, the system falls back to JSON (if JSON file exists), otherwise to defaults If CLI input references a file or resource that does not exist, the system stops execution and displays an error message in the console If CLI parameters are malformed, system stops execution and displays an error message Optional: the console displays which configuration source was used for each value JSON config file exist JSON file sets configuration options and overrides defaults If the JSON file is not found, the system stops execution and displays an error message in the console If the JSON file is malformed, the system stops execution and displays an error message in the console If JSON has partial config, the system merges with default for unspecified values Optional: the console displays which configuration source was used for each value Default behavior If required keys are missing and have no defaults, the system stops execution and displays an error message in the console Optional: the console displays which configuration source was used for each value"
  },
  "docs/CrossFeatures/Warnings.html": {
    "href": "docs/CrossFeatures/Warnings.html",
    "title": "Warnings | SharpMermaid",
    "summary": "Warnings Scenarios Warn when solution contains no projects Given a solution EmptySolution And the solution contains no .csproj files When I run the command: sharpmermaid generate-diagram --solution ./EmptySolution.sln from the solution directory Then the console output includes the warning: \"No projects found in the solution EmptySolution\" Warn on bi-directional project references Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj ProjectB at ProjectB/ProjectB.csproj And ProjectA references ProjectB And ProjectB references ProjectA When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln from the solution directory Then the console output includes the warning: \"Bi-directional dependency detected between ProjectA and ProjectB\" Warn when project contains no .cs files Given a solution NoCsFilesSolution containing: EmptyProject at EmptyProject/EmptyProject.csproj And EmptyProject contains no .cs files When I run the command: sharpmermaid generate-diagram --solution ./NoCsFilesSolution.sln` from the solution directory Then the console output includes the warning: \"No .cs files found in EmptyProject\" Warn when a single file contains multiple public types Given a solution MultiTypeSolution containing: MultiTypeProject at MultiTypeProject/MultiTypeProject.csproj And MultiTypeProject has a file Types.cs containing: public class A {} public class B {} When I run the command: sharpmermaid generate-diagram --solution ./MultiTypeSolution.sln from the solution directory Then the console output includes the warning: \"Multiple public types found in {FullPath}/MultiTypeProject/Types.cs: A, B\""
  },
  "docs/DocumentationDogma.html": {
    "href": "docs/DocumentationDogma.html",
    "title": "Documentation Dogma | SharpMermaid",
    "summary": "Documentation Dogma Features As a, I want, So that. Rules May, Must, Must, Not If a rule is exercised in a scenario, then it must include a link to the scenario Scenarios Given, When, Then Output: Raw mermaid in code block: to show the expected output in the code block Resolved diagram, to make sure that the expected output is in a correct format"
  },
  "docs/Features/ConfigureApplication/Main.html": {
    "href": "docs/Features/ConfigureApplication/Main.html",
    "title": "Configure Application | SharpMermaid",
    "summary": "Configure Application Description As a developer, I want to configure the application via a combination of CLI parameters, JSON files, and default values, So that I can ensure flexibility and robust fallback behavior in different environments Rules CLI parameters always override JSON and defaults JSON configuration file overrides default values Defaults are used only when a value is not provided in either CLI or JSON If a required CLI parameter is missing (and not in JSON), the system must stop execution and display an error message If CLI input references a non-existent file or resource, the system must stop execution and display an error message If CLI parameters are malformed, the system must stop execution and display an error message If the JSON file does not exist or is malformed, the system must stop execution and display an error message If JSON config is partial, it must merge with defaults for missing values Final Options object must reflect the merged configuration (CLI > JSON > Defaults) Scenarios Given no CLI parameter SlnPath and no value in JSON When the CLI is run Then the system stops execution And the console displays an error message indicating the missing required parameter Given the CLI parameter --configPath=nonexistent.json When the CLI is run Then the system stops execution And the console displays an error message indicating the file was not found This is an example command where \"generate-diagram\" is the main(?) command, \"--solution\" is the path to the solution, relative from where directory the command is executed from, and \"--include-urls false\" is a flag: sharpmermaid generate-diagram --solution ./TestSolution.sln --include-urls false"
  },
  "docs/Features/GenerateClassDiagrams/Main.html": {
    "href": "docs/Features/GenerateClassDiagrams/Main.html",
    "title": "Generate Class Diagrams | SharpMermaid",
    "summary": "Generate Class Diagrams Description As a developer, I want to generate a class diagram for each .csproj in my solution, So that I can visualize the structure, responsibilities, and relationships of types in the project. Rules General Structure [!include[Shared Diagram Rules](../Shared/DiagramRules.md)] Each diagram must start with a classDiagram declaration Each generated diagram must have a title matching the project name Each class must be represented with the .cs file name as the node name Class nodes must display the type name and its kind: Supported kinds: class (including regular, abstract, sealed, generic, partial) interface (including generic and partial) struct (including readonly, partial, and generic) enum record (including record class, record struct, readonly record struct, generic, and partial) Only types from .cs files within the target .csproj must be included File Organization and Grouping Namespaces must be used for grouping when applicable Class nodes must be grouped based on their nested folder structure Partial types must be grouped according to their file path structure within the .csproj Dependencies to partial classes must link to each individual partial class, rather than a merged representation Relationships Relationships must be indicated with usage arrows when dependencies exist between classes - Supported relationship types include: - Inheritance (<|--) � Extends a class (parent-child relationship) - Composition (*--) � Has-a relationship (strong ownership; part-whole) - Aggregation (o--) � Has-a relationship (weaker ownership; shared instance) - Association (-->) � References or links to another class - Dependency (..>) � Uses another class but does not own it (loose coupling) - Realization (..|>) � Implements an interface (contract fulfillment) Clickable Links Each class node must include a clickable link to its corresponding source file, formatted as [BaseUrl] / [Relative Path to Project] / [Source File Name] Styling Types with public access modifiers must have a green edge for clear visibility, formatted as: style [TypeName] stroke:green,stroke-width:4px Supported types include: class, interface, enum, struct, record. TODO: How to visualize multiple implemented interfaces? Should inheritance chains show only direct parent-child links, or full ancestry? How to differentiate between inherited members and explicitly declared members? constructors, methods, and properties May ( configurables ) Scenarios Generating Diagrams for Multiple Projects Given a solution containing multiple projects And each project contains multiple .cs files, including files within nested directories When I generate the diagrams Then a separate class diagram should be created for each project And each diagram should have a title matching the project name And each class node should be named after its .cs file And each class node should have a clickable URL reflecting its full directory structure, including nested folders"
  },
  "docs/Features/GenerateLogicalProjectDiagram/Main.html": {
    "href": "docs/Features/GenerateLogicalProjectDiagram/Main.html",
    "title": "Logical Project Diagram | SharpMermaid",
    "summary": "Logical Project Diagram Description As a developer, I want to generate a package-style diagram that groups projects by their folder structure, So that I can understand how the solution is logically organized and interconnected. Rules [!include[Shared Diagram Rules](../Shared/DiagramRules.md)] Diagram must start with a graph Declaration The console must display a warning message \"No projects found in the solution\", when the solution contains no .csproj files Diagram must have a title same as the solution name The diagram may include a node for each project in the solution, with the same name as the project Relationships must be indicated with usage arrows when dependencies exist between projects, including bi-directional dependencies A warning must be issued in the console when a bi-directional dependency is detected Project nodes must be grouped into subgraphs based on their folder structure when multiple projects exist inside grouping folders Configuration Project nodes that has source files, may include a url to the projects class diagram Each project node in the diagram may display all public types defined within the project, including: classes interfaces structs enums records Scenarios Solution With Without Projects Given the solution contains no projects When the diagram is generated Then the title should be the solution name And the diagram should have no nodes or dependencies Solution With Root Projects Only Given all projects are in the solution root folder When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project Solution With Root Projects Only With Dependencies Given all projects are in the solution root folder And some projects depend on each other When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And arrows should represent the dependencies between projects Mixed Folder Structure With 1 Root Project Given one project is in the root folder And the other projects are in a subfolder And the root project has dependencies to the other projects When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And nodes should be grouped into subgraphs based on their folder structure And And arrows should represent project dependencies Mixed Folder Structure With Multiple Root Projects Given multiple projects are in the root folder And other projects are in subfolders And some projects depend on each other When the diagram is generated Then the title should be the solution name And the diagram should include a node for each project And nodes should be grouped into subgraphs based on their folder structure And And arrows should represent project dependencies"
  },
  "docs/Features/GeneratePhysicalProjectDiagram/AcceptanceTests.html": {
    "href": "docs/Features/GeneratePhysicalProjectDiagram/AcceptanceTests.html",
    "title": "Create Physical Project Diagram | SharpMermaid",
    "summary": "Create Physical Project Diagram Description As a developer, I want to automatically create a .md file at a specified output location, containing a code block, with a mermaid diagram that accurately represents the physical structure of my solution on disk, So that I can include it in my documentation with minimal effort CLI Usage sharpmermaid generate-diagram --solution {string} --output {string} [--fileName {string}] [--topLevelPublicTypes {bool}] [--classDiagramLinks {bool}] [--baseUrl {string}] Required: --solution {pathToSolution}: Path to the solution file (relative to the current directory) --output {pathToOutput}: Path to the generated .md file (relative to the current directory) Optional: --fileName {string}: Name of the generated .md file (without the .md extension) Default: \"mermaid\" --topLevelPublicTypes {bool}: Whether to include top-level public types in each project Default: false --classDiagramLinks {bool}: Whether to include clickable URLs to a class diagram for each project The URL pattern for class diagram links is: {baseUrl}/{FilePath}/{ProjectName} It cannot be customized beyond this pattern Default: false --baseUrl {string}: Base URL to prepend to diagram links when --classDiagramLinks is enabled Rules Creating .md File If no .md file exists at the specified location, the system must create a new .md file and must display \"Created new file '{fileName}.md' at '{path}'\" see: scenario If a .md file with the same name already exists at that location, the system must overwrite it and must display \"Overwriting existing file at '{path}/{fileName}.md'\" see: scenario The created .md file: Must start with mermaid code block fence Must end with code block fence footer Must have its first non-fence line start with graph Must include a title that matches the solution name Must include project nodes matching the project names May include clickable URLs to class diagrams May include top-level public types May include project references between projects Configuration Resolution CLI-provided optional flags must override the .sharpmermaidconfig.json file see: scenario If optional flags are not specified on the CLI, values must be taken from the .sharpmermaidconfig.json file located in the pathToSolution directory see: scenario If neither the CLI nor the .sharpmermaidconfig.json file specifies an optional value, the system must fall back to default values see: scenario Error Handling If a {required argument} is not provided, the system must stop execution and must display: \"Error: Missing required argument '{required argument}'\" see: scenario If the provided solution file does not exist, the system must stop execution and must display: \"Error: Solution file not found at '{path}'. Please provide a valid path\" see: scenario If the specified output path is invalid or inaccessible, the system must stop execution and must display: \"Error: Unable to write to '{path}'. Ensure the directory exists and is writable\" see: scenario If the JSON config file is invalid, the system must stop execution and must display: \"Error: Invalid configuration file at '{path}'. Please check the JSON format\" see: scenario If --classDiagramLinks is true but no --baseUrl is provided, the system must stop execution and must display: \"Error: Missing required argument 'baseUrl' when 'classDiagramLinks' is enabled. Please provide '--baseUrl {string}' or configure it in '.sharpmermaidconfig.json'\" see: scenario If the specified output path {path} contains illegal characters, the system must stop execution and must display: \"Error: The output path '{path}' contains illegal characters. Please provide a valid file path.\" see: scenario If the system cannot interpret the specified output path {path} as a valid file path, the system must stop execution and must display: \"Error: The output path '{path}' is not a valid file path. Please provide a valid file path.\" see: scenario Scenarios Creating a New .md File Given the specified output path {path} exists and is writable And no file named {fileName}.md exists at {path} When the system executes the command Then the system must create a new .md file named {fileName}.md at {path} And the system must display: \"Created new file '{fileName}.md' at '{path}'\" Overwriting an Existing .md File Given the specified output path {path} exists and is writable And a file named {fileName}.md already exists at {path} When the system executes the command Then the system must overwrite the existing {fileName}.md file with the new content And the system must not create a backup of the old file And the system must display: \"Overwriting existing file at '{path}/{fileName}.md'\" CLI Optionals Override .sharpmermaidconfig.json Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file Example.cs in ProjectA with public class Example {} And a .sharpmermaidconfig.json file exist in the solution with: { \"includeUrls\": false, \"topLevelPublicTypes\": false } When the developer runs: sharpmermaid generate-diagram --solution ./TestSolution.sln --output ./diagram.md --includePublicTypes true Then the generated .md file's code block includes public types: ```mermaid --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Foo\"] ``` --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Foo\"] .sharpmermaidconfig.json Used for Optionals Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file Example.cs in ProjectA with public class Example {} And a .sharpmermaidconfig.json file exist in the solution with: { \"includeUrls\": false, \"topLevelPublicTypes\": true } When the developer runs: sharpmermaid generate-diagram --solution ./TestSolution.sln --output ./diagram.md Then the generated .md file's code block includes public types: ```mermaid --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Example\"] ``` --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Example\"] Defaults Used for Missing Optionals Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file Example.cs in ProjectA with public class Example {} And no .sharpmermaidconfig.json file exist in the solution When the developer runs: sharpmermaid generate-diagram --solution ./TestSolution.sln --output ./diagram.md Then the generated .md file's code block does not include public types: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA Required Argument Missing Given a solution TestSolution When the developer runs the command: sharpmermaid generate-diagram Then the system stops execution and displays an error message: Error: Missing required argument '--solution' Invalid Solution Path Given no solution When the developer runs the command: sharpmermaid generate-diagram --solution ./NonExistent.sln Then the system stops execution and displays an error message: Error: Solution file not found at './NonExistent.sln'. Please provide a valid path Invalid .sharpmermaidconfig.json Given a JSON config file exists at ./config.json And the file content is not valid JSON When the developer runs: sharpmermaid generate-diagram --solution ./TestSolution.sln --output ./diagram.md Then the system stops execution And displays an error message: \"Error: Invalid configuration file at ./config.json. Please check the JSON format\" Optional Flags Provided Directly Given no JSON config exists When the developer runs: sharpmermaid generate-diagram --solution ./TestSolution.sln --output ./diagram.md --includeUrls false --includePublicTypes true Then the system generates a .md file at ./diagram.md And the file’s content includes public types And does not include clickable URLs And the file’s content matches the expected output: Illegal Characters in Output Path Given the specified output path {path} contains illegal characters (e.g., <>|:\"?* on Windows) When the system executes the command Then the system must stop execution And the system must display: \"Error: The output path '{path}' contains illegal characters. Please provide a valid file path.\" Invalid Output Path Given the specified output path {path} is not a valid file path (e.g., references a device name like COM1 or is structurally invalid) When the system executes the command Then the system must stop execution And the system must display: \"Error: The output path '{path}' is not a valid file path. Please provide a valid file path.\" Postcondition: The file MySolution.md contains the up-to-date diagram. Missing --baseUrl with --classDiagramLinks enabled Given a developer runs sharpmermaid generate-diagram --solution MySolution.sln --output diagram.md --classDiagramLinks true There is no --baseUrl specified via CLI The .sharpmermaidconfig.json in the solution directory does not include baseUrl When The tool processes the command Then the system must stop execution The system must display the following error message: \"Error: Missing required argument 'baseUrl' when 'classDiagramLinks' is enabled. Please provide '--baseUrl {string}' or configure it in '.sharpmermaidconfig.json'\" No diagram file is created or modified DU SKAL HUSKE AT INKLUDERE OVERWRITE EXISTING FILE {FILENAME OR PATH OR WHATEVER} ? YES/NO:"
  },
  "docs/Features/GeneratePhysicalProjectDiagram/CommandLineArguments.html": {
    "href": "docs/Features/GeneratePhysicalProjectDiagram/CommandLineArguments.html",
    "title": "| SharpMermaid",
    "summary": "Physical Project Diagram Argument Description <solution.sln> Specifies the solution file to process. --output <file> Defines the output file for the diagram. --include-urls Adds URLs to class diagrams --include-public-types Displays public top-level types"
  },
  "docs/Features/GeneratePhysicalProjectDiagram/Main.html": {
    "href": "docs/Features/GeneratePhysicalProjectDiagram/Main.html",
    "title": "Generate Physical Project Diagram | SharpMermaid",
    "summary": "Generate Physical Project Diagram Description As a developer, I want to generate a diagram that reflects the solution structure on disk, and format it as a mermaid code block, So I can use it in a .md file Rules Must start with mermaid code block fence see Must end with code block fence footer see First non-fence line must begin with graph Must include a title same as the solution name Must include a project node for each project in the solution Individual project nodes must have the same name as the project Project nodes may include project references May include a clickable url to a projects class diagram May include projects top-level public types Scenarios Project References No Reference Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj ProjectB at ProjectB/ProjectB.csproj ProjectC at ProjectC/ProjectC.csproj When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln` from the solution directory Then the output is: ```mermaid --- title: TestSolution --- graph ProjectA ProjectB ProjectC ``` --- title: TestSolution --- graph ProjectA ProjectB ProjectC One-Way Reference Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj ProjectB at ProjectB/ProjectB.csproj ProjectC at ProjectC/ProjectC.csproj ProjectD at ProjectC/ProjectD.csproj ProjectE at ProjectC/ProjectE.csproj ProjectF at ProjectC/ProjectF.csproj And ProjectA has a project reference to ProjectB and ProjectC And ProjectB has a project reference to ProjectD And ProjectE has a project reference to ProjectF When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln from the solution directory Then the output is: ```mermaid --- title: TestSolution --- graph ProjectA ProjectB ProjectC ProjectE ProjectF ProjectA --> ProjectB ProjectA --> ProjectC ProjectB --> ProjectD ProjectE --> ProjectF ``` --- title: TestSolution --- graph ProjectA ProjectB ProjectC ProjectE ProjectF ProjectA --> ProjectB ProjectA --> ProjectC ProjectB --> ProjectD ProjectE --> ProjectF Bi-Directional Reference Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj ProjectB at ProjectB/ProjectB.csproj ProjectC at ProjectC/ProjectC.csproj And ProjectA has a project reference to ProjectB and ProjectC And ProjectB has a project reference to ProjectA When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln from the solution directory Then the output is: ```mermaid --- title: TestSolution --- graph ProjectA ProjectB ProjectC ProjectA --> ProjectC ProjectA <--> ProjectB ``` --- title: TestSolution --- graph ProjectA ProjectB ProjectC ProjectA --> ProjectC ProjectA <--> ProjectB URLs Config Explicitly Enabled Given a solution TestSolution containing: Zebra at Zebra/Zebra.csproj Monkey at Cage/Monkey/Monkey.csproj Penguin at NorthPole/IceBlock/Penguin/Penguin.csproj And the base url is set to https://example.com/ When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln --include-urls true from the solution directory Then the code block must include a clickable URL to each the projects class diagram And the URL must correctly reflect the project’s file path (if it's not at the root directory) And the output is: ```mermaid --- title: TestSolution --- graph Zebra Monkey Penguin click Zebra \"https://example.com/Zebra.csproj\" click Monkey \"https://example.com/Cage/Monkey.csproj\" click Penguin \"https://example.com/NorthPole/IceBlock/Penguin.csproj\" ``` --- title: TestSolution --- graph Zebra Monkey Penguin click Zebra \"https://example.com/Zebra.csproj\" click Monkey \"https://example.com/Cage/Monkey.csproj\" click Penguin \"https://example.com/NorthPole/IceBlock/Penguin.csproj\" Explicitly Disabled Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj And a JSON config file exists with IncludeUrls set to true When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln --include-urls false Then the generated diagram output must not contain any URLs And the output is: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA No Config (default behavior) Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj And no CLI parameters for URLs are provided And no JSON config file exists When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln Then the generated diagram output must not contain any URLs And the output is: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA JSON Fallback Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj And no CLI parameter for URLs are provided And a JSON config file exists with IncludeUrls set to true And the base url is set to https://example.com/ When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln from the solution directory Then the code block must include a clickable URL for the projects class diagram And the output is: ```mermaid --- title: TestSolution --- graph ProjectA click Zebra \"https://example.com/ProjectA.csproj\" ``` --- title: TestSolution --- graph ProjectA click Zebra \"https://example.com/ProjectA.csproj\" JSON Not Found Fallback to Default Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj And no CLI parameters for URLs are provided And no JSON config file exists When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln Then the generated diagram output must not contain any URLs And the output is: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA CLI Overrides JSON Config Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj And a JSON config file exists with IncludeUrls set to false And the base url is set to https://example.com/ When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln --include-urls true Then the code block must include a clickable URL to the projects class diagram And the output is: ```mermaid --- title: TestSolution --- graph ProjectA click ProjectA \"https://example.com/ProjectA.csproj\" ``` --- title: TestSolution --- graph ProjectA click ProjectA \"https://example.com/ProjectA.csproj\" Public Types Config Explicitly Enabled Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file Rabbit.cs in ProjectA with: public class Rabbit {} A file Dog.cs in ProjectB with: public class Dog {} internal class IFoo {} private class Bar {} class Baz {} A file Cat.cs in ProjectC with: public class Cat {} public interface IFoo {} public record Bar {} When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln --include-public-types true Then each node must list all public top-level types And the output is: ```mermaid --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Rabbit\"] ProjectB[\"**ProjectB** public class Dog\"] ProjectC[\"**ProjectC** public class Cat public interface IFoo public record Bar\"] ``` --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Rabbit\"] ProjectB[\"**ProjectB** public class Dog\"] ProjectC[\"**ProjectC** public class Cat public interface IFoo public record Bar\"] Explicitly Disabled Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file Rabbit.cs in ProjectA with: public class Rabbit {} And a JSON config file exists with IncludePublicTypes: true When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln --include-public-types false Then the generated diagram output must not contain any public types And the output is: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA No Config (Default Behavior) Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file PublicTypeExample.cs in ProjectA with: public class Foo {} And no CLI parameter or JSON config file is present When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln Then the generated diagram output must not contain any public types And the output is: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA JSON Fallback Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj A file PublicTypeExample.cs in ProjectA with: public class Foo {} And a JSON config file exists with: { \"IncludePublicTypes\": true } When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln Then the generated diagram output must include the public type Foo And the output is: ```mermaid --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Foo\"] ``` --- title: TestSolution --- graph ProjectA[\"**ProjectA** public class Foo\"] JSON Not Found Fallback to Default Given a solution TestSolution containing: ProjectA at ProjectA/ProjectA.csproj And a file PublicTypeExample.cs in ProjectA with: public class Foo {} And no JSON config file exists When I run the command: sharpmermaid generate-diagram --solution ./TestSolution.sln Then the generated diagram output must not include any public types And the output is: ```mermaid --- title: TestSolution --- graph ProjectA ``` --- title: TestSolution --- graph ProjectA CLI Overrides JSON Config Technical Notes The URL pattern for clickable links is currently global, set to {baseUrl}/{FilePath}/{ProjectName}, and cannot be customized File Output Handling Save to .md file Content of file matches in-memory diagram"
  },
  "docs/Features/SaveDiagram.md/Main.html": {
    "href": "docs/Features/SaveDiagram.md/Main.html",
    "title": "Save Physical Project Diagram | SharpMermaid",
    "summary": "Save Physical Project Diagram Description As a developer, I need to save the diagram I generated, So I can easily reference my project's structure and dependencies later. Saving Rules The diagram must be saved as a .md file containing a Mermaid.js code block. The file must always be overwritten to reflect the latest solution state. The default path must be the directory where the command is executed. 3.a If the developer specifies a custom path in the console, the diagram must be saved accordingly. The default filename must be PhysicalProjectDiagram.md. 4.a If the developer specifies a custom filename in the console, the diagram must be saved accordingly. The console must display a confirmation message showing the saved file location. Edge Case Handling Non-Existent Path -> Display \"Error: The specified path does not exist.\" Invalid Characters in Filename -> Display \"Error: Invalid filename detected.\" Insufficient Write Permissions -> Display \"Error: Unable to save diagram. Check permissions.\""
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | SharpMermaid",
    "summary": "Getting Started Bacon ipsum dolor amet bacon hamburger doner beef tail, boudin ribeye biltong. Pastrami meatball ball tip bacon pig turkey. Meatball short loin pig turkey shoulder pork belly. T-bone drumstick pastrami cupim shoulder ribeye sausage, strip steak turducken shankle jowl kevin beef ribs bacon short loin. Sirloin pig shank tri-tip t-bone jerky bacon tail, hamburger landjaeger swine. Hamburger pancetta chislic fatback, tongue tri-tip bacon capicola pastrami ground round beef ribs venison. Mention .sharpmermaidconfig.json Command-Line Physical Project Diagram Argument Description <solution.sln> Specifies the solution file to process. --output <file> Defines the output file for the diagram. --include-urls Adds URLs to class diagrams --include-public-types Displays public top-level types"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SharpMermaid | SharpMermaid",
    "summary": "Welcome to SharpMermaid Important Under construction Document C# code in Markdown using Mermaid diagrams. This project is a C# library that generates Markdown documentation from C# code, with support for Mermaid diagrams. It is designed to be easy to use and integrate into your existing documentation workflow."
  }
}